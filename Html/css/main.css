



/*
CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明
选择器通常是您需要改变样式的 HTML 元素。
每条声明由一个属性和一个值组成。
属性（property）是您希望设置的样式属性（style attribute）
每个属性有一个值。属性和值被冒号分开
选择器        声明
  h1   {color:blue; font-size:12px;}
        属性   值
*/

/*
id 和 class (选择器)

id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。
HTML元素以id属性来设置id选择器,CSS 中 id 选择器以 "#" 来定义。
以下的样式规则应用于元素属性 id="para1":
#para1 {text-align:center; color:red;}

class 选择器用于描述一组元素的样式，class 选择器有别于id选择器，class可以在多个元素中使用。
class 选择器在HTML中以class属性表示, 在 CSS 中，类选择器以一个点"."号显示：
在以下的例子中，所有拥有 center 类的 HTML 元素均为居中。
.center {text-align:center;}
p.center {text-align:center;}
*/

/*
CSS 可以通过以下方式添加到HTML中:
内联样式- 在HTML元素中使用"style" 属性
内部样式表 -在HTML文档头部 <head> 区域使用<style> 元素 来包含CSS
外部引用 - 使用外部 CSS 文件

外部引用
当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，
你可以通过改变一个文件来改变整个站点的外观。
每个页面使用 <link> 标签链接到样式表。 <link> 标签在（文档的）头部：
<head>
<link rel="stylesheet" type="text/css" href="mystyle.css">
</head>
浏览器会从文件 mystyle.css 中读到样式声明，并根据它来格式文档。

内部样式表
当单个文档需要特殊的样式时，就应该使用内部样式表。你可以使用 <style> 标签在文档头部定义内部样式表
<head>
<style>
hr {color:sienna;}
p {margin-left:20px;}
body {background-image:url("images/back40.gif");}
</style>
</head>

内联样式
由于要将表现和内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时。
要使用内联样式，你需要在相关的标签内使用样式（style）属性。Style 属性可以包含任何 CSS 属性。本例展示如何改变段落的颜色和左外边距：
<p style="color:sienna;margin-left:20px">这是一个段落。</p>

多重样式
如果某些属性在不同的样式表中被同样的选择器定义，那么属性值将从更具体的样式表中被继承过来。
例如，外部样式表拥有针对 h3 选择器的三个属性
h3 {color:red; text-align:left; font-size:8pt;}
而内部样式表拥有针对 h3 选择器的两个属性
h3 {text-align:right; font-size:20pt;}
假如拥有内部样式表的这个页面同时与外部样式表链接，那么 h3 得到的样式是
color:red; text-align:right; font-size:20pt;
即颜色属性将被继承于外部样式表，而文字排列（text-alignment）和字体尺寸（font-size）会被内部样式表中的规则取代。

多重样式 优先级
样式表允许以多种方式规定样式信息。样式可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个外部的 CSS 文件中。甚至可以在同一个 HTML 文档内部引用多个外部样式表。
一般情况下，优先级如下：
（内联样式）Inline style > （内部样式）Internal style sheet >（外部样式）External style sheet > 浏览器默认样式
内联样式 > id 选择器 > 类选择器 = 伪类选择器 = 属性选择器 > 标签选择器 = 伪元素选择器
*/

/* css 背景 */
/*
CSS 背景属性用于定义HTML元素的背景。
CSS 属性定义背景效果: |
----------------------
background-color 背景色
CSS中，颜色值通常以以下方式定义:
十六进制 - 如："#ff0000"
RGB - 如："rgb(255,0,0)"
颜色名称 - 如："red"
-----------------------
background-image 背景图
背景图像进行平铺重复显示，以覆盖整个元素实体

-----------------------
background-repeat 背景图平铺方向
no-repeat :不进行平铺
repeat-x  :水平方向平铺
repeat-y  :垂直方向平铺
repeat    :水平和垂直方向平铺

-----------------------
background-attachment 背景图的滚动模式
*当 background-repeat 为 no-repeat 时生效
scroll 背景图随着页面的滚动
fixed  背景图不会随着页面的滚动
local  背景图随着元素内容的滚动
initial 设置该属性的默认值
inherit 该属性继承于父元素
------------------------
background-position 背景图的展示位置
top left bottom right

x% :水平位置
y% :垂直位置



*/



body {
    /*背景色*/
    /* background-color: aliceblue; */
    /*背景图*/
    background-image: url('/img/bg.jpg');
    /*背景图平铺模式*/
    background-repeat: no-repeat;
    /*背景图的滚动模式*/
    background-attachment: scroll;
    /*背景图的展示位置*/
    background-position: 100% 0%;
    /*将背景图填充到整个屏幕*/
    background-size: cover;

    /*字体*/
    font-family: ".SF NS Mono";
    /*字体颜色*/
    color: antiquewhite;
    /*字体大小*/
    font-size: 20px;
    /*文本对齐方式*/
    text-align: center;

}


/* 布局 */
/* 盒子模型 box model
所有HTML元素可以看作盒子，在CSS中，"box model"这一术语是用来设计和布局时使用。
CSS盒模型本质上是一个盒子，封装周围的HTML元素，
它包括：边距(margin)，边框(border)，填充(padding)，和实际内容(content)。
盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。
下面的图片说明了盒子模型(Box Model)：

margin 外边距  清除边框外的区域，外边距是透明的
border 边框    围绕在内边距和内容外的边框
padding 那边框 清除内容周围的区域，内边距是透明的
content 内容   盒子的内容，显示文本和图像

元素的宽高
当您指定一个 CSS 元素的宽度和高度属性时，
你只是设置内容区域的宽度和高度。
要知道，完整大小的元素，你还必须添加内边距，边框和外边距


*/

#app{
  width: 100%;
  height: 100%;
  display: flex;
}

#navigation_bar{
  background-color: rgba(0, 0, 0, 0.3);

  width: 100%;
  height: 70px;
  position: fixed;
  top: 0px;
}
.pull-btn{
  width: 50px;
  height: 50px;
  background-color: rosybrown;

  position: absolute;
  left: 0px;
  top: 0px;
  margin-left: 10px;
  margin-top: 10px;
  
}

#menu_view{
  background-color: rgba(0, 0, 0, 0.1);

  width: 200px;
  height: 100%;
  
  padding-left: 10px;
  padding-top: 10px;
  padding-right: 10px;
  
  position: absolute;
  top: 70px;

}

#nemu_btn{
  width: 100%;
  height: 40px;
  margin-bottom: 10px;
  background-color: rgba(0, 0, 0, 0.3);
  color: honeydew;
}

#content_view{
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.2);

  position: relative;
  top: 70px;
  left: 200px;
  right: 200px;

  padding-right: 10px;
  padding-bottom: 10px;
}

.card_view{
  width: 300px;
  height: 200px;
  background-color: rgba(0, 0, 0, 0.3);

  margin-top: 10px;
  margin-left: 10px;
  
}

#right_view{
  width: 200px;
  height: 100%;
  
  position: fixed;
  right: 0px;
  top: 70px;
}

@media screen {
  
}